{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Automatically delete unused ENIs that are blocking ELB scaling using Amazon Cloudwatch events and AWS Lambda",
    "Metadata": {
        "LICENSE": "Copyright 2016 Amazon Web Services, Inc. or its affiliates. All Rights Reserved. This file is licensed to you under the AWS Customer Agreement (the \"License\"). You may not use this file except in compliance with the License. A copy of the License is located at http://aws.amazon.com/agreement/ . This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and limitations under the License.",
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "General Configuration"
                    },
                    "Parameters": [
                        "DryRun"
                    ]
                }
            ],
            "ParameterLabels": {
                "DryRun": {
                    "default": "Dry Run"
                }
            }
        }
    },
    "Parameters": {
        "DryRun": {
            "Description": "Set to true to test function without actually deleting ENIs",
            "Type": "String",
            "Default": "true"
        }
    },
    "Resources": {
        "LambdaIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AELBInsufficientENIs",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "LambdaLogging",
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                },
                                {
                                    "Sid": "ENI",
                                    "Action": [
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LambdaFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "// Sample Lambda Function to remove unattached ENIs in the region of the event when AWS Health AWS_ELASTICLOADBALANCING_ENI_LIMIT_REACHED events are generated. ",
                                "// This is useful for situations where you might have leftover ENIs that are not used and are preventing load balancer scaling",
                                "'use strict';",
                                "var AWS = require('aws-sdk');",
                                "const dryRun = process.env.DRY_RUN || 'true';",
                                "",
                                "//main function which gets AWS Health data from Cloudwatch event",
                                "exports.handler = (event, context, callback) => {",
                                "    //extract details from Cloudwatch event",
                                "    var eventName = event.detail.eventTypeCode;",
                                "    var region = event.region;",
                                "    const awsHealthSuccessMessage = `Successfully got details from AWS Health event ${eventName} and executed automated action in ${region}.`;",
                                "",
                                "    // we only need to run this automation once per invocation since the issue ",
                                "    // of ENI exhaustion is regional and not dependent on the load balancers in the alert",
                                "    // Event will only trigger for one region so we don't have to loop that",
                                "    AWS.config.update({region: region});",
                                "    var ec2 = new AWS.EC2();",
                                "    ",
                                "    console.log ('Getting the list of available ENI in region %s', region);",
                                "    var params = {",
                                "        Filters: [{Name: 'status',Values: ['available']}]",
                                "    };",
                                "    ",
                                "    ec2.describeNetworkInterfaces(params, function(err, data) {",
                                "        if (err) console.log( region, err, err.stack); // an error occurred",
                                "        else ",
                                "        {",
                                "            console.log('Found %s available ENI',data.NetworkInterfaces.length); // successful response",
                                "            // for each interface, remove it",
                                "            for ( var i=0; i < data.NetworkInterfaces.length; i+=1)",
                                "            {",
                                "                var netId = data.NetworkInterfaces[i].NetworkInterfaceId;",
                                "                if (dryRun == 'true')",
                                "                {",
                                "                    console.log('Dry run is true - not deleting %s', netId);            ",
                                "                } else {",
                                "                    console.log('No dry run - deleting %s', netId);",
                                "                    deleteNetworkInterface(netId); ",
                                "                }",
                                "            }",
                                "        }",
                                "    });",
                                "",
                                "    callback(null, awsHealthSuccessMessage); //return success",
                                "};",
                                "",
                                "//This function removes an ENI",
                                "function deleteNetworkInterface (networkInterfaceId) {",
                                "    var ec2 = new AWS.EC2();",
                                "    ",
                                "    console.log ('Attempting to delete the following ENI: %s', networkInterfaceId);",
                                "    var deleteNetworkInterfaceParams = {",
                                "        NetworkInterfaceId: networkInterfaceId,",
                                "        DryRun: false",
                                "    };",
                                "    ec2.deleteNetworkInterface(deleteNetworkInterfaceParams, function(err, data) {",
                                "        if (err) console.log(networkInterfaceId, err, err.stack); // an error occurred",
                                "        else console.log('ENI deleted: %s', networkInterfaceId);  // successful response",
                                "    });",
                                "}",
                                ""
                            ]
                        ]
                    }
                },
                "Description": "Delete unused ENIs in response to AWS health events",
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaIAMRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs4.3",
                "Timeout": 120,
                "Environment": {
                    "Variables": {
                        "DRY_RUN": {
                            "Ref": "DryRun"
                        }
                    }
                }
            },
            "Type": "AWS::Lambda::Function"
        },
        "LambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "CloudWatchEventRule",
                        "Arn"
                    ]
                }
            }
        },
        "CloudWatchEventRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "AWS_ELASTICLOADBALANCING_ENI_LIMIT_REACHED",
                "EventPattern": {
                    "source": [
                        "aws.health"
                    ],
                    "detail-type": [
                        "AWS Health Event"
                    ],
                    "detail": {
                        "service": [
                            "ELASTICLOADBALANCING"
                        ],
                        "eventTypeCategory": [
                            "issue"
                        ],
                        "eventTypeCode": [
                            "AWS_ELASTICLOADBALANCING_ENI_LIMIT_REACHED"
                        ]
                    }
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "LambdaFunction",
                                "Arn"
                            ]
                        },
                        "Id": "InsufficientENIsFunction"
                    }
                ]
            }
        }
    }
}